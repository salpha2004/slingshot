#define CONFIGURE_INIT
#include <iostream>  //for cout and cerr
#include <stdio.h>
#include <stdlib.h>
#include <rtems.h>
#include <bsp.h>

#define CONFIGURE_APPLICATION_NEEDS_CONSOLE_DRIVER
#define CONFIGURE_APPLICATION_NEEDS_CLOCK_DRIVER
#define CONFIGURE_MAXIMUM_TASKS			2
#define CONFIGURE_MAXIMUM_SEMAPHORES	5
#define CONFIGURE_MAXIMUM_PRIORITY		3
#define CONFIGURE_RTEMS_INIT_TASKS_TABLE
#include <rtems/confdefs.h>

#include "testcase_executer.h"

/* note: default priority for Init task is 1 (the highest). */
#define TC_TASK_PRIORITY 2
#define TC_TIMEOUT_DIVISION_FACTOR 10
/* in microseconds. should be dividable by TC_TIMEOUT_DIVISION_FACTOR. */
#define TC_TIMEOUT 5000000

using namespace std;

#define RUN_TC(TC_NAME_ID) \
{ \
  tc_finished = false; \
  rtems_id tc_task_id; \
  rtems_name tc_task_name = rtems_build_name( 'T', 'C', ' ', ' '); \
  rtems_status_code status; \
  cout << #TC_NAME_ID << " Started..." << endl; \
  status = rtems_task_create( \
    tc_task_name, TC_TASK_PRIORITY, RTEMS_MINIMUM_STACK_SIZE, \
    RTEMS_DEFAULT_MODES, RTEMS_DEFAULT_ATTRIBUTES, &tc_task_id); \
\
  std::cout << "TC task creation: " << \
    rtems_status_text (status) << std::endl; \
\
  status = rtems_task_start (tc_task_id, TC_NAME_ID, 0); \
\
  std::cout << "TC task start: " << \
    rtems_status_text (status) << std::endl; \
\
  for (int i=0; i<TC_TIMEOUT_DIVISION_FACTOR; i++) { \
    status = rtems_task_wake_after( \
      RTEMS_MICROSECONDS_TO_TICKS (TC_TIMEOUT/TC_TIMEOUT_DIVISION_FACTOR)); \
    if (tc_finished) \
      break; \
  } \
  if (tc_finished) \
    cout << #TC_NAME_ID << ": " << "PASS" << endl; \
  else \
    cout << #TC_NAME_ID << ": " << "RESTART" << endl; \
  cout << endl; \
}

rtems_task Init (rtems_task_argument)
{

